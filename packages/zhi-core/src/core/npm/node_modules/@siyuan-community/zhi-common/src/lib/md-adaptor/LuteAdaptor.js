// noinspection TypeScriptUnresolvedReference
System.register(["../utils/zhi-common-util.js"], function (exports_1, context_1) {
    "use strict";
    var zhi_common_util_js_1, LuteAdaptor;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (zhi_common_util_js_1_1) {
                zhi_common_util_js_1 = zhi_common_util_js_1_1;
            }
        ],
        execute: function () {
            /**
             * Lute 适配器
             *
             * 引用 lute 库的方法
             *
             * 1 dev/prod 环境
             * 在 index.html 直接引用 <script src="/lib/lute/lute.min.js"></script>
             *
             * 2 test 环境
             * 在 setup.ts 引用 require("../public/lib/lute/lute.min.js")
             *
             * 3 es 环境（不推荐）
             *
             *   ```
             *   // https://stackoverflow.com/a/73702082/4037224
             *   const require = createRequire(import.meta.url)
             *   global.require = require //this will make require at the global scobe and treat it like the original require
             *   require("./lute.min.cjs")
             *   ```
             *
             *   更好的方法
             *
             *   ```
             *   import Module from "node:module"
             *
             *   const require = Module.createRequire(import.meta.url)
             *   require("./lute.min.cjs")
             *   ```
             *
             *   2023-04-09 - lute version 2.7.5 - update at April 9, 2023 09:32
             *
             * 4 Nuxt3 环境
             *   参考：https://github.com/88250/lute/issues/191
             *
             * @see {@link https://github.com/88250/lute/tree/master/javascript lute}
             *
             * @author terwer
             * @version 1.0.0
             * @since 1.0.0
             */
            LuteAdaptor = class LuteAdaptor {
                logger;
                constructor() {
                    this.logger = zhi_common_util_js_1.createCommonLogger("lute-adaptor");
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    if (Lute) {
                        this.logger.debug("Detected Lute is bundled, will use!");
                    }
                    else {
                        this.logger.debug("Lute is not available!");
                    }
                }
                isAvailable() {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    return typeof Lute !== "undefined";
                }
                /**
                 * 高亮关键字
                 *
                 * @param str - 字符串
                 * @private
                 */
                highlightWords(str) {
                    const regex = /(?<=^|[\s\S])==([^\n]+?)==(?=($|[\s\S]))/g;
                    return str.replace(regex, '<span class="mark">$1</span>');
                }
                /**
                 * 渲染Markdown
                 *
                 * @param md - Markdown
                 */
                async renderMarkdownStr(md) {
                    if (!this.isAvailable()) {
                        this.logger.error("Lute is not available, will return original md");
                        return md;
                    }
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    const luteObj = Lute;
                    const lute = luteObj.New();
                    const renderers = {
                        renderText: (node, entering) => {
                            if (entering) {
                                // 替换所有符合格式的标记为指定的 HTML 代码
                                const renderedText = this.highlightWords(node.Text());
                                return [renderedText, luteObj.WalkContinue];
                            }
                            return ["", luteObj.WalkContinue];
                        },
                        // renderStrong: (node: any, entering: any) => {
                        //     return ["", luteObj.WalkContinue]
                        // },
                        // renderParagraph: (node: any, entering: any) => {
                        //     return ["", luteObj.WalkContinue]
                        // }
                    };
                    lute.SetJSRenderers({
                        renderers: {
                            Md2HTML: renderers,
                        },
                    });
                    this.logger.info("Lute is rendering md to HTML...");
                    return lute.MarkdownStr("", md);
                }
            };
            exports_1("default", LuteAdaptor);
        }
    };
});
//# sourceMappingURL=LuteAdaptor.js.map