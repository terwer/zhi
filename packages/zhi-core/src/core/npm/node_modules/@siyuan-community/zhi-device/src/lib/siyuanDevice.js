/*
 * Copyright (c) 2023, Terwer . All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Terwer designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Terwer in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Terwer, Shenzhen, Guangdong, China, youweics@163.com
 * or visit www.terwer.space if you need additional information or have any
 * questions.
 */
System.register(["./browserUtil.js", "./basePathTypeEnum.js"], function (exports_1, context_1) {
    "use strict";
    var browserUtil_js_1, basePathTypeEnum_js_1, SiyuanDevice;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (browserUtil_js_1_1) {
                browserUtil_js_1 = browserUtil_js_1_1;
            },
            function (basePathTypeEnum_js_1_1) {
                basePathTypeEnum_js_1 = basePathTypeEnum_js_1_1;
            }
        ],
        execute: function () {
            /**
             * 思源笔记设备相关
             *
             * @public
             * @author terwer
             * @version 0.1.0
             * @since 0.1.0
             */
            SiyuanDevice = class SiyuanDevice {
                /**
                 * 思源笔记iframe挂件环境
                 */
                static isInSiyuanWidget = () => {
                    if (!browserUtil_js_1.default.isInBrowser) {
                        return false;
                    }
                    return (window.frameElement != null &&
                        window.frameElement.parentElement != null &&
                        window.frameElement.parentElement.parentElement != null &&
                        window.frameElement.parentElement.parentElement.getAttribute("data-node-id") !== "");
                };
                /**
                 * 思源笔记新窗口
                 *
                 * @deprecated window.terwer 判断方式已废弃，建议以后打开新窗口注入 window.siyuanNewWin ，这样语义会更容易理解
                 * @author terwer
                 * @version 0.1.0
                 * @since 0.0.1
                 */
                static isInSiyuanNewWin = () => {
                    if (!browserUtil_js_1.default.isInBrowser) {
                        return false;
                    }
                    if (!browserUtil_js_1.default.isElectron()) {
                        return false;
                    }
                    /**
                     * @deprecated 已废弃，建议以后使用 window.siyuanNewWin 来判断，会更有意义
                     */
                    return typeof window.terwer !== "undefined" || typeof window.siyuanNewWin !== "undefined";
                };
                /**
                 * 检测是否运行在思源打开的浏览器中
                 */
                static isInSiyuanBrowser() {
                    if (!browserUtil_js_1.default.isInBrowser) {
                        return false;
                    }
                    return typeof window.siyuan !== "undefined" && typeof window.Lute !== "undefined";
                }
                /**
                 * 思源笔记 window 对象
                 */
                static siyuanWindow() {
                    let win;
                    if (this.isInSiyuanWidget()) {
                        win = parent.window;
                    }
                    else {
                        if (this.isInSiyuanNewWin()) {
                            win = window;
                        }
                        else if (this.isInSiyuanBrowser()) {
                            win = window;
                        }
                        else if (typeof window !== "undefined") {
                            win = window;
                        }
                        else {
                            win = undefined;
                        }
                    }
                    return win;
                }
                // =========================
                // require start
                // =========================
                /**
                 * 引入依赖
                 *
                 * @param libpath - 依赖全路径
                 * @param abs - 可选，是否使用觉得路径，默认是 true ， 启用之后 type参数无效
                 * @param type - 可选，以谁的基本路径为准
                 */
                static requireLib = (libpath, abs = true, type = basePathTypeEnum_js_1.default.BasePathType_None) => {
                    if (!browserUtil_js_1.default.hasNodeEnv()) {
                        throw new Error("require ony works on node env");
                    }
                    let absLibpath = libpath;
                    if (!abs) {
                        switch (type) {
                            case basePathTypeEnum_js_1.default.BasePathType_Appearance:
                                absLibpath = this.joinPath(this.siyuanAppearancePath(), libpath);
                                break;
                            case basePathTypeEnum_js_1.default.BasePathType_Data:
                                absLibpath = this.joinPath(this.siyuanDataPath(), libpath);
                                break;
                            case basePathTypeEnum_js_1.default.BasePathType_Themes:
                                absLibpath = this.joinPath(this.siyuanAppearancePath(), "themes", libpath);
                                break;
                            case basePathTypeEnum_js_1.default.BasePathType_ZhiTheme:
                                absLibpath = this.joinPath(this.siyuanAppearancePath(), "themes", "zhi", libpath);
                                break;
                            default:
                                throw new Error("type must be provided when not use absolute path");
                        }
                    }
                    const syWin = this.siyuanWindow();
                    if (!syWin) {
                        return require(absLibpath);
                    }
                    if (typeof syWin.require !== "undefined") {
                        return syWin.require(absLibpath);
                    }
                    return undefined;
                };
                /**
                 * 引入依赖，以 data 的基本路径为准
                 *
                 * @param libpath - 相对于 appearance 的相对路径
                 */
                static requireAppearanceLib = (libpath) => {
                    return this.requireLib(libpath, false, basePathTypeEnum_js_1.default.BasePathType_Appearance);
                };
                /**
                 * 引入依赖，以 data 的基本路径为准
                 *
                 * @param libpath - 相对于 data 的相对路径
                 */
                static requireDataLib = (libpath) => {
                    return this.requireLib(libpath, false, basePathTypeEnum_js_1.default.BasePathType_Data);
                };
                /**
                 * 引入依赖，以 theme 的基本路径为准
                 *
                 * @param libpath - 相对于 theme 的相对路径
                 */
                static requireThemesLib = (libpath) => {
                    return this.requireLib(libpath, false, basePathTypeEnum_js_1.default.BasePathType_Themes);
                };
                /**
                 * 引入依赖，以 ZhiTheme 的基本路径为准
                 *
                 * @param libpath - 相对于 ZhiTheme 的相对路径
                 */
                static requireZhiThemeLib = (libpath) => {
                    return this.requireLib(libpath, false, basePathTypeEnum_js_1.default.BasePathType_ZhiTheme);
                };
                // =========================
                // require end
                // =========================
                // =========================
                // import start
                // =========================
                /**
                 * 引入json
                 *
                 * @param jsPath - js相对路径全路径
                 * @param type - 类型
                 */
                static async importJs(jsPath, type) {
                    let fullJsonPath = jsPath;
                    switch (type) {
                        case basePathTypeEnum_js_1.default.BasePathType_Appearance:
                            fullJsonPath = this.browserJoinPath(this.siyuanAppearanceRelativePath(), jsPath);
                            break;
                        case basePathTypeEnum_js_1.default.BasePathType_Data:
                            fullJsonPath = this.browserJoinPath(this.siyuanDataRelativePath(), jsPath);
                            break;
                        case basePathTypeEnum_js_1.default.BasePathType_Themes:
                            fullJsonPath = this.browserJoinPath(this.siyuanThemeRelativePath(), jsPath);
                            break;
                        case basePathTypeEnum_js_1.default.BasePathType_ZhiTheme:
                            fullJsonPath = this.browserJoinPath(this.zhiThemeRelativePath(), jsPath);
                            break;
                        default:
                            throw new Error("type must be provided");
                    }
                    const { default: data } = await context_1.import(/* @vite-ignore */ fullJsonPath);
                    return data;
                }
                /**
                 * 引入json
                 *
                 * @param jsonPath - json相对路径全路径
                 * @param type - 类型
                 */
                // public static async importJson(jsonPath: string, type: BasePathTypeEnum) {
                //   let fullJsonPath = jsonPath
                //   switch (type) {
                //     case BasePathTypeEnum.BasePathType_Appearance:
                //       fullJsonPath = this.browserJoinPath(this.siyuanAppearanceRelativePath(), jsonPath)
                //       break
                //     case BasePathTypeEnum.BasePathType_Data:
                //       fullJsonPath = this.browserJoinPath(this.siyuanDataRelativePath(), jsonPath)
                //       break
                //     case BasePathTypeEnum.BasePathType_Themes:
                //       fullJsonPath = this.browserJoinPath(this.siyuanThemeRelativePath(), jsonPath)
                //       break
                //     case BasePathTypeEnum.BasePathType_ZhiTheme:
                //       fullJsonPath = this.browserJoinPath(this.zhiThemeRelativePath(), jsonPath)
                //       break
                //     default:
                //       throw new Error("type must be provided")
                //   }
                //
                //   const { default: data } = await import(/* @vite-ignore */ fullJsonPath, { assert: { type: "json" } })
                //   return data
                // }
                /**
                 * 引入 json - 以 data 为基本路径
                 *
                 * @param jsonPath - 相对于 data 的相对路径
                 */
                // public static async importDataJson(jsonPath: string) {
                //   return await this.importJson(jsonPath, BasePathTypeEnum.BasePathType_Data)
                // }
                /**
                 * 引入 json - 以 appearance 为基本路径
                 *
                 * @param jsonPath - 相对于 appearance 的相对路径
                 */
                // public static async importAppearanceJson(jsonPath: string) {
                //   return await this.importJson(jsonPath, BasePathTypeEnum.BasePathType_Appearance)
                // }
                /**
                 * 引入 json - 以 themes 为基本路径
                 *
                 * @param jsonPath - 相对于 themes 的相对路径
                 */
                // public static async importThemesJson(jsonPath: string) {
                //   return await this.importJson(jsonPath, BasePathTypeEnum.BasePathType_Themes)
                // }
                /**
                 * 引入 zhi 主题的 json - 以 zhi 主题 的根路径为基本路径
                 *
                 * @param jsonPath - 相对于 zhi 主题根路径的相对路径
                 */
                // public static async importZhiThemeJson(jsonPath: string) {
                //   return await this.importJson(jsonPath, BasePathTypeEnum.BasePathType_ZhiTheme)
                // }
                /**
                 * 引入 zhi 主题的 js - 以 zhi 主题 的根路径为基本路径
                 *
                 * @param jsPath - 相对于 zhi 主题根路径的相对路径
                 */
                static async importZhiThemeJs(jsPath) {
                    return await this.importJs(jsPath, basePathTypeEnum_js_1.default.BasePathType_ZhiTheme);
                }
                // =========================
                // import start
                // =========================
                /**
                 * 路径拼接
                 *
                 * @param paths - 路径数组
                 */
                static joinPath(...paths) {
                    if (browserUtil_js_1.default.hasNodeEnv()) {
                        const path = this.requireLib("path");
                        if (path) {
                            return path.join(...paths);
                        }
                    }
                    return this.browserJoinPath(...paths);
                }
                static browserJoinPath(...paths) {
                    return paths.join(browserUtil_js_1.default.BrowserSeperator);
                }
                /**
                 * 思源笔记 conf 目录
                 */
                static siyuanConfPath() {
                    const syWin = this.siyuanWindow();
                    if (!syWin) {
                        throw new Error("Not in siyuan env");
                    }
                    return syWin.siyuan.config.system.confDir;
                }
                /**
                 * 思源笔记 data 目录
                 */
                static siyuanDataPath() {
                    const syWin = this.siyuanWindow();
                    if (!syWin) {
                        throw new Error("Not in siyuan env");
                    }
                    return syWin.siyuan.config.system.dataDir;
                }
                /**
                 * 思源笔记 data 目录-相对路径
                 */
                static siyuanDataRelativePath() {
                    const syWin = this.siyuanWindow();
                    if (!syWin) {
                        throw new Error("Not in siyuan env");
                    }
                    return "";
                }
                /**
                 * 思源笔记 appearance 目录
                 */
                static siyuanAppearancePath() {
                    return this.joinPath(this.siyuanConfPath(), "appearance");
                }
                /**
                 * 思源笔记 appearance 目录-相对路径
                 */
                static siyuanAppearanceRelativePath() {
                    const syWin = this.siyuanWindow();
                    if (!syWin) {
                        throw new Error("Not in siyuan env");
                    }
                    return this.browserJoinPath("", "appearance");
                }
                /**
                 * 思源笔记 themes 目录-绝对路径
                 *
                 * 注意: 如果是非 electron 和 Node 环境，这里返回的是浏览器的路径，不是物理路径
                 * 如果使用物理路径，请调用 siyuanAppearancePath 或者 siyuanDataPath
                 *
                 * @author terwer
                 * @since 0.1.0
                 */
                static siyuanThemePath() {
                    if (browserUtil_js_1.default.hasNodeEnv()) {
                        return this.joinPath(this.siyuanAppearancePath(), "themes");
                    }
                    else {
                        const syWin = this.siyuanWindow();
                        if (!syWin) {
                            throw new Error("Not in siyuan env");
                        }
                        return this.joinPath(syWin.location.origin, "appearance", "themes");
                    }
                }
                /**
                 * 思源笔记 themes 目录-相对路径
                 */
                static siyuanThemeRelativePath() {
                    const syWin = this.siyuanWindow();
                    if (!syWin) {
                        throw new Error("Not in siyuan env");
                    }
                    return this.browserJoinPath("", "appearance", "themes");
                }
                /**
                 * zhi 主题目录 - 绝对路径
                 */
                static zhiThemePath() {
                    return this.joinPath(this.siyuanThemePath(), "zhi");
                }
                /**
                 * zhi 主题目录 - 相对路径
                 */
                static zhiThemeRelativePath() {
                    return this.browserJoinPath(this.siyuanThemeRelativePath(), "zhi");
                }
            };
            exports_1("default", SiyuanDevice);
        }
    };
});
//# sourceMappingURL=siyuanDevice.js.map